"""
Custom Chain

This module implements a customizable LangChain-based chain that can be dynamically configured for
specific use cases in the Automated Bureaucracy system.
"""

from langchain.chains import SequentialChain
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain.llms import OpenAI
from typing import List, Dict


class CustomChain:
    """
    A dynamically configurable chain that can adapt to specific workflows or requirements.
    """

    def __init__(self, openai_api_key: str, model: str = "gpt-4", steps: List[Dict] = None):
        """
        Initializes the CustomChain with configurable steps.

        Args:
            openai_api_key (str): OpenAI API key for accessing the LLM.
            model (str): OpenAI model to use. Default is "gpt-4".
            steps (List[Dict]): List of steps to define the custom chain, each step should include:
                - "name": Name of the step.
                - "prompt_template": Prompt template string.
                - "input_variables": List of input variable names for the step.
        """
        self.memory = ConversationBufferMemory(memory_key="custom_chain_history")
        self.llm = OpenAI(api_key=openai_api_key, model=model, temperature=0.7)
        self.steps = steps or []
        self.chain = self.build_chain()

    def build_chain(self) -> SequentialChain:
        """
        Builds the custom workflow chain based on the configured steps.

        Returns:
            SequentialChain: A LangChain SequentialChain instance.
        """
        chains = []
        for step in self.steps:
            prompt = PromptTemplate(
                input_variables=step["input_variables"],
                template=step["prompt_template"],
            )
            chains.append(prompt.to_chain(llm=self.llm))
        return SequentialChain(
            memory=self.memory,
            chains=chains,
            verbose=True,
        )

    def run_chain(self, inputs: Dict) -> Dict:
        """
        Executes the custom chain with the given inputs.

        Args:
            inputs (Dict): Input data for the chain.

        Returns:
            Dict: Outputs generated by the chain.
        """
        try:
            result = self.chain.run(inputs)
            return {"result": result}
        except Exception as e:
            return {"error": f"Failed to execute custom chain: {str(e)}"}


if __name__ == "__main__":
    # Example usage of CustomChain
    import os

    # Retrieve the OpenAI API key from environment variables
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "your_openai_api_key_here")

    # Example steps for the custom chain
    steps_config = [
        {
            "name": "Validation",
            "prompt_template": "Validate the following data: {data}. Provide 'Valid' or 'Invalid' with reasons.",
            "input_variables": ["data"],
        },
        {
            "name": "Analysis",
            "prompt_template": "Analyze the validated data: {validated_data}. Summarize key insights.",
            "input_variables": ["validated_data"],
        },
        {
            "name": "Decision",
            "prompt_template": "Based on the analysis: {analysis}, make a decision and provide justification.",
            "input_variables": ["analysis"],
        },
    ]

    # Initialize the CustomChain
    custom_chain = CustomChain(openai_api_key=OPENAI_API_KEY, steps=steps_config)

    # Example input
    input_data = {
        "data": "Budget proposal for a $15,000 marketing campaign targeting social media platforms.",
        "validated_data": "Valid",
        "analysis": "The campaign is targeting high-ROI platforms, but the budget exceeds limits.",
    }

    # Run the chain
    response = custom_chain.run_chain(input_data)

    # Print the results
    print("Custom Chain Output:")
    print(response)
