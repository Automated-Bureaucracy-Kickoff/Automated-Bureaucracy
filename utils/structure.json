{
    "backend": {
        "agents": {
            "": [
                "__init__.py",
                "agent.py",
                "multi_agent_manager.py",
                "agent_state_manager.py",
                "agent_collaboration.py",
                "bureaucracy_agent.py"
            ]
        },
        "langchain_tools": {
            "tools": {
                "nlp": {
                    "": [
                        "text_summary_tool.py",
                        "sentiment_analysis_tool.py"
                    ]
                },
                "media": {
                    "": [
                        "text_to_image_tool.py",
                        "audio_processing_tool.py"
                    ]
                },
                "workflow": {
                    "": [
                        "document_parser_tool.py",
                        "approval_pipeline_tool.py",
                        "compliance_checker_tool.py"
                    ]
                }
            },
            "chains": {
                "": [
                    "custom_chain.py",
                    "retrieval_chain.py",
                    "decision_chain.py",
                    "rag_chain.py",
                    "approval_chain.py",
                    "compliance_chain.py"
                ]
            },
            "prompts": {
                "": [
                    "default_prompt.py",
                    "system_prompt.py",
                    "custom_prompt_library.py",
                    "approval_prompt.py",
                    "compliance_prompt.py"
                ]
            },
            "memory": {
                "": [
                    "vector_memory.py",
                    "long_term_memory.py",
                    "document_context_memory.py"
                ]
            },
            "": [
                "__init__.py",
                "tool_loader.py",
                "langchain_config.py"
            ]
        },
        "mlflow_integration": {
            "": [
                "__init__.py",
                "mlflow_manager.py",
                "tracking.py",
                "model_loader.py",
                "model_fine_tuner.py"
            ]
        },
        "analytics": {
            "": [
                "agent_monitor.py",
                "data_visualizer.py",
                "anomaly_detection.py",
                "workflow_monitor.py",
                "compliance_report.py"
            ]
        },
        "security": {
            "auth": {
                "": [
                    "authentication.py",
                    "authorization.py"
                ]
            },
            "document": {
                "": [
                    "document_access_control.py"
                ]
            },
            "": [
                "rbac_config.py"
            ]
        },
        "tasks": {
            "": [
                "task_scheduler.py",
                "priority_task_queue.py",
                "reminder_job.py",
                "compliance_job.py"
            ]
        },
        "api_integration": {
            "v1": {
                "": [
                    "weather_api.py",
                    "finance_api.py",
                    "sentiment_api.py"
                ]
            },
            "v2": {
                "": [
                    "new_feature_api.py"
                ]
            }
        },
        "services": {
            "workflows": {
                "": [
                    "approval_service.py",
                    "compliance_service.py"
                ]
            },
            "documents": {
                "": [
                    "document_service.py"
                ]
            }
        },
        "config": {
            "": [
                "__init__.py",
                "settings.py",
                "langchain.py",
                "bureaucracy.py",
                "logging.yaml",
                "secrets.json"
            ]
        },
        "middleware": {
            "auth": {
                "": [
                    "authentication.py",
                    "authorization.py"
                ]
            },
            "logging": {
                "": [
                    "error_handling.py",
                    "logging_middleware.py"
                ]
            },
            "langchain": {
                "": [
                    "langchain_middleware.py"
                ]
            }
        },
        "cli": {
            "commands": {
                "agents": {
                    "": [
                        "start_agent.py",
                        "stop_agent.py",
                        "list_agents.py"
                    ]
                },
                "workflows": {
                    "": [
                        "start_workflow.py",
                        "approve_task.py",
                        "generate_report.py"
                    ]
                }
            },
            "utils": {
                "": [
                    "config_loader.py",
                    "arg_parser.py",
                    "logger.py",
                    "workflow_helper.py",
                    "report_generator.py"
                ]
            },
            "": [
                "cli_manager.py"
            ]
        },
        "docs": {
            "": [
                "API.md",
                "LANGCHAIN.md",
                "AGENT_INTEROPERABILITY.md",
                "KNOWLEDGE_GRAPH.md",
                "WORKFLOW_GUIDE.md",
                "COMPLIANCE_GUIDE.md",
                "SYSTEM_ARCHITECTURE.md"
            ]
        },
        "tests": {
            "agents": {
                "": [
                    "test_agents.py",
                    "test_agent_collaboration.py"
                ]
            },
            "workflows": {
                "": [
                    "test_approval_service.py",
                    "test_compliance_workflow.py"
                ]
            },
            "langchain": {
                "": [
                    "test_langchain_tools.py",
                    "test_langchain_chains.py"
                ]
            },
            "integration": {
                "": [
                    "test_endpoints.py",
                    "test_document_pipeline.py"
                ]
            },
            "functional": {
                "": [
                    "test_multi_agent_pipeline.py",
                    "test_toolkits.py"
                ]
            },
            "": [
                "conftest.py"
            ]
        },
        "": [
            "main.py",
            "requirements.txt",
            "Dockerfile",
            ".env",
            "README.md"
        ]
    },
    "frontend": {
        "src": {
            "pages": {
                "workflows": {
                    "": [
                        "WorkflowDashboard.jsx",
                        "ApprovalPage.jsx",
                        "CompliancePage.jsx"
                    ]
                }
            },
            "api": {
                "": [
                    "workflowApi.js",
                    "complianceApi.js"
                ]
            }
        },
        "tests": {
            "e2e": {
                "": [
                    "test_workflow_dashboard.js",
                    "test_approval_page.js"
                ]
            }
        }
    },
    "ci_cd": {
        "": [
            "github-actions.yml",
            "docker-compose.prod.yml"
        ]
    },
    "scripts": {
        "": [
            "build.sh",
            "deploy.sh",
            "start.sh",
            "stop.sh",
            "run_tests.sh",
            "run_workflow.sh",
            "deploy_staging.sh",
            "deploy_prod.sh"
        ]
    },
    "logs": {
        "": [
            ".gitignore"
        ]
    },
    "utils": {
        "common": {
            "": [
                "report_generator.py",
                "workflow_helper.py",
                "config_loader.py"
            ]
        },
        "logging": {
            "": [
                "structured_logger.py",
                "log_rotator.py"
            ]
        }
    },
    "": [
        "README.md",
        "LICENSE.md",
        ".gitignore",
        ".prettierrc",
        ".eslintrc.json",
        "CHANGELOG.md"
    ]
}
